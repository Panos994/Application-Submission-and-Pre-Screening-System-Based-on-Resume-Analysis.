pipeline {
    agent any
    environment {
        BACKEND_IMAGE = 'ghcr.io/panos994/application-submission-and-pre-screening-system-based-on-resume-analysis/backend'
        FRONTEND_IMAGE = 'ghcr.io/panos994/application-submission-and-pre-screening-system-based-on-resume-frontend'
    }
    stages {
        stage('Git Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Get Version') {
            steps {
                script {
                    // Get the latest git tag to use for versioning (semantic versioning)
                    def version = sh(script: "git describe --tags --abbrev=0", returnStdout: true).trim()

                    // If there's no version tag, default to 0.0.1
                    if (!version) {
                        version = "0.0.1"
                    }

                    // Use the version in the image tag
                    env.BACKEND_IMAGE = "ghcr.io/panos994/application-submission-and-pre-screening-system-based-on-resume-analysis/backend:${version}"
                    env.FRONTEND_IMAGE = "ghcr.io/panos994/application-submission-and-pre-screening-system-based-on-resume-frontend:${version}"
                    echo "Using version: ${version}"
                }
            }
        }
        stage('Docker Build Backend') {
            steps {
                script {
                    // Build the backend Docker image with semantic versioning
                    sh "docker build -t ${env.BACKEND_IMAGE} -f Dockerfile.backend ."
                }
            }
        }
        stage('Docker Build Frontend') {
            steps {
                script {
                    // Build the frontend Docker image with semantic versioning
                    sh "docker build -t ${env.FRONTEND_IMAGE} -f Dockerfile.frontend ."
                }
            }
        }
        stage('Docker Login to GHCR') {
            steps {
                script {
                    def github_username = "Panos994"
                    def github_token = "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"
                    // Log in to GHCR using the token and username
                    sh "echo ${github_token} | docker login ghcr.io -u ${github_username} --password-stdin"
                }
            }
        }
        stage('Push Backend Image') {
            steps {
                script {
                    // Push the backend Docker image to GitHub Container Registry
                    sh "docker push ${env.BACKEND_IMAGE}"
                }
            }
        }
        stage('Push Frontend Image') {
            steps {
                script {
                    // Push the frontend Docker image to GitHub Container Registry
                    sh "docker push ${env.FRONTEND_IMAGE}"
                }
            }
        }
        stage('Pull Backend Image') {
            steps {
                sh 'docker pull $BACKEND_IMAGE'
            }
        }
        stage('Pull Frontend Image') {
            steps {
                sh 'docker pull $FRONTEND_IMAGE'
            }
        }
        stage('Deploy to Kubernetes') {
            environment {
                KUBECONFIG = '/etc/rancher/k3s/k3s.yaml' // Path to kubeconfig file on EC2 instance
            }
            steps {
                // Apply database and MinIO manifests using relative paths from the repository
                sh 'kubectl apply -f k3s/database/deployment.yaml'
                sh 'kubectl apply -f k3s/database/service.yaml'
                sh 'kubectl apply -f k3s/minio'

                // Apply the backend and frontend images from GitHub Packages
                sh 'kubectl apply -f k3s/backend/deployment.yaml'  // Path to backend deployment.yaml
                sh 'kubectl apply -f k3s/backend/service.yaml'     // Path to backend service.yaml

                // Ensure backend deployment exists, or create it if it doesn't
                script {
                    def backendDeploymentExists = sh(script: "kubectl get deployment spring-backend -o name", returnStatus: true) == 0
                    if (!backendDeploymentExists) {
                        echo "Backend deployment not found, creating it."
                        // Create the backend deployment if it doesn't exist
                        sh 'kubectl apply -f k3s/backend/deployment.yaml'  // Applying backend deployment if it doesn't exist
                    }
                }

                // Set the images for the backend and frontend deployments
                sh 'kubectl set image deployment/spring-backend spring-backend=$BACKEND_IMAGE'
                sh 'kubectl set image deployment/vue-frontend vue-frontend=$FRONTEND_IMAGE'
            }
        }
    }
}




// build part και push στο container registry (eite se auto eite se allo)
//prepei na skefto kai mixanismo versioning (semantic versioning)
