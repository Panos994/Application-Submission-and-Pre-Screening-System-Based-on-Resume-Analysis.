pipeline {
    agent any
    environment {
        BACKEND_IMAGE = 'ghcr.io/panos994/application-submission-and-pre-screening-system-based-on-resume-analysis/backend'
        FRONTEND_IMAGE = 'ghcr.io/panos994/application-submission-and-pre-screening-system-based-on-resume-frontend'
    }
    stages {
        stage('Get Version') {
            steps {
                script {
                    // Checkout the 'master' branch
                    sh 'git checkout master'

                    // Get the commit hash for the 'master' branch
                    def commitHash = sh(script: "git rev-parse --short master", returnStdout: true).trim()

                    // Construct version string (use the commit hash in the versioning)
                    def version = "1.0.0-${commitHash}"
                    echo "Using generated version: ${version}"

                    // Use the version in the image tag
                    env.BACKEND_IMAGE = "ghcr.io/panos994/application-submission-and-pre-screening-system-based-on-resume-analysis/backend:${version}"
                    env.FRONTEND_IMAGE = "ghcr.io/panos994/application-submission-and-pre-screening-system-based-on-resume-frontend:${version}"
                }
            }
        }

          stage('Build Backend Image') {
                     steps {
                         script {
                             echo "Building backend Docker image"

                             // Use OpenJDK 17 as the base image and install Maven manually using apk
                             sh '''
                             docker run --rm -v $(pwd):/app -w /app openjdk:17-alpine bash -c "
                             apk update && apk add --no-cache curl bash && \
                             curl -sL https://apache.org/dyn/closer.cgi/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.tar.gz -o maven.tar.gz && \
                             tar -xvzf maven.tar.gz && \
                             mv apache-maven-3.8.6 /opt/maven && \
                             ln -s /opt/maven/bin/mvn /usr/bin/mvn && \
                             mvn clean package -DskipTests
                             "
                             '''

                             // Build the backend Docker image using the JAR file
                             sh "docker build -t $BACKEND_IMAGE -f Dockerfile.backend ."
                         }
                     }
          }

        stage('Build Frontend Image') {
            steps {
                script {
                    echo "Building frontend Docker image"
                    // Build the frontend Docker image
                    sh "docker build -t $FRONTEND_IMAGE -f Dockerfile.frontend ."
                }
            }
        }

        stage('Docker Login to GHCR') {
            steps {
                script {
                    def github_username = "Panos994"
                    def github_token = "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"
                    // Log in to GHCR using the token and username
                    sh "echo ${github_token} | docker login ghcr.io -u ${github_username} --password-stdin"
                }
            }
        }

        stage('Push Backend Image') {
            steps {
                script {
                    echo "Pushing backend Docker image to GHCR"
                    // Push the backend image to GHCR
                    sh "docker push $BACKEND_IMAGE"
                }
            }
        }

        stage('Push Frontend Image') {
            steps {
                script {
                    echo "Pushing frontend Docker image to GHCR"
                    // Push the frontend image to GHCR
                    sh "docker push $FRONTEND_IMAGE"
                }
            }
        }

        stage('Pull Backend Image') {
            steps {
                sh 'docker pull $BACKEND_IMAGE'
            }
        }

        stage('Pull Frontend Image') {
            steps {
                sh 'docker pull $FRONTEND_IMAGE'
            }
        }

        stage('Deploy to Kubernetes') {
            environment {
                KUBECONFIG = '/etc/rancher/k3s/k3s.yaml' // Path to kubeconfig file on EC2 instance
            }
            steps {
                // Apply database and MinIO manifests using relative paths from the repository
                sh 'kubectl apply -f k3s/database/deployment.yaml'
                sh 'kubectl apply -f k3s/database/service.yaml'
                sh 'kubectl apply -f k3s/minio'

                // Apply the backend and frontend images from GitHub Packages
                sh 'kubectl apply -f k3s/backend/deployment.yaml'  // Path to backend deployment.yaml
                sh 'kubectl apply -f k3s/backend/service.yaml'     // Path to backend service.yaml

                // Ensure backend deployment exists, or create it if it doesn't
                script {
                    def backendDeploymentExists = sh(script: "kubectl get deployment spring-backend -o name", returnStatus: true) == 0
                    if (!backendDeploymentExists) {
                        echo "Backend deployment not found, creating it."
                        // Create the backend deployment if it doesn't exist
                        sh 'kubectl apply -f k3s/backend/deployment.yaml'  // Applying backend deployment if it doesn't exist
                    }
                }

                // Set the images for the backend and frontend deployments
                sh 'kubectl set image deployment/spring-backend spring-backend=$BACKEND_IMAGE'
                sh 'kubectl set image deployment/vue-frontend vue-frontend=$FRONTEND_IMAGE'
            }
        }
    }
}


// build part και push στο container registry (eite se auto eite se allo)
//prepei na skefto kai mixanismo versioning (semantic versioning)
